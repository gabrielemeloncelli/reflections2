When would you want to use a remote repository rather than keeping all your work local?
There are many reasons to use a remote repository:
- when you use different computers to work on a project
- when you collaborate with other people on the same project
- when you want to have a central repository in case your computer will not be available (you cannot bring it with you, it is under repair, etc.)

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- forks are copies of a cloud project to another cloud project
- clones are loca copy of a remote or a local project
- branches are separate modification threads of the same project

Forks are used mainly to modify some open project and adapt to one's need without being part of the main project development team.
Clones are used mainly for collaborative development. All the developers clone the cloud project and push the modifications back when done.
Branches are used for implementing new features, refactor code, implement experimental modifications, etc. 
They can be merged to the main branch if the result is good.

What is the benefit of having a copy of the last known state of the remote stored locally?


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
The collaboration with GitHub can enjoy the benefits of many helping features.
Sharing a remote project and pushing the changes from different PCs can speed-up the development.
The easyer part is bugfixing, and introducing features with small crosstalk with the main branch.
Where the changes are conflicting, it will take more effort to merge the changes and effectively join the efforts.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
I would make changes in a separate branch when changes require a greater effort to be completed, are separate features, require experimental activities or there are other people working on the master branch on GitHub.
Small bugfixes and marginal changes are better candidates to be performed directly on the master branch.
Operating on a separate branch allows bugfixes and small adjustments to be done on the master branch while the changes are implemented in the separate branch.
If the changes do not work as expected, they can easily be abandoned if they are on a separate branch.
All the changes performed on the master branch, on the other side, are quickly available to be adopted in the software releases and to be merged in the other branches.

